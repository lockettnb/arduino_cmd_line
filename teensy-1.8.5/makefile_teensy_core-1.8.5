# Arduino installation directory and path to ARM tools 



# 2018/03/07 notes
#   changed ARDUINOPATH to 1.8.5 directory
#   changed flags to 1.8.5
#   changed arvhive tool name to gcc-ar
#   changed path variables a bit
#   combined copy include files with build of lib


# ARDUINOPATH = /home/john/opt/arduino-1.8.5

# path location for Teensy 3 core
COREPATH = $(CURDIR)
TOOLSPATH = $(abspath $(COREPATH)/../tools)
COMPILERPATH = $(abspath $(TOOLSPATH)/arm/bin)

# directory to build in
BUILDPATH = $(abspath $(CURDIR)/build)

# install location core library and include
LIBPATH = $(abspath $(CURDIR)/../lib)
INCPATH = $(abspath $(CURDIR)/../include)

# USB flag 2018/03/09 
USBFLAG = -DUSB_SERIAL
# USBFLAG = -DUSB_KEYBOARDONLY

# stolen for the "verbose" output of Arduino compile process 
ASMFLAGS = -c -O2 -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD -x assembler-with-cpp -mthumb -mcpu=cortex-m4 -fsingle-precision-constant -D__MK20DX256__ -DTEENSYDUINO=141 -DARDUINO=10805 -DF_CPU=96000000 $(USBFLAG) -DLAYOUT_US_ENGLISH

CFLAGS = -c -O2 -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD  -mthumb -mcpu=cortex-m4 -fsingle-precision-constant -D__MK20DX256__ -DTEENSYDUINO=141 -DARDUINO=10805 -DF_CPU=96000000 $(USBFLAG) -DLAYOUT_US_ENGLISH

CPPFLAGS = -c -O2 -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD -fno-exceptions -felide-constructors -std=gnu++14 -fno-rtti -mthumb -mcpu=cortex-m4 -fsingle-precision-constant -D__MK20DX256__ -DTEENSYDUINO=141 -DARDUINO=10805 -DF_CPU=96000000 $(USBFLAG) -DLAYOUT_US_ENGLISH

# linker options
# LDFLAGS = -Os -Wl,--gc-sections -mcpu=cortex-m4 -mthumb -T$(LDSCRIPT)

# names for the compiler programs
CC = $(abspath $(COMPILERPATH))/arm-none-eabi-gcc
CXX = $(abspath $(COMPILERPATH))/arm-none-eabi-g++

# 1.6.1 --> AR = $(abspath $(COMPILERPATH))/arm-none-eabi-ar
AR = $(abspath $(COMPILERPATH))/arm-none-eabi-gcc-ar

OBJCOPY = $(abspath $(COMPILERPATH))/arm-none-eabi-objcopy
SIZE = $(abspath $(COMPILERPATH))/arm-none-eabi-size

# automatically create lists of the sources and objects
ASM_FILES := $(wildcard *.S)
C_FILES := $(wildcard *.c)
CPP_FILES := $(wildcard *.cpp)
INC_FILES := $(wildcard *.h)


SOURCES := $(C_FILES:.c=.o) $(CPP_FILES:.cpp=.o) $(ASM_FILES:.S=.o)
OBJS := $(foreach src,$(SOURCES), $(BUILDPATH)/$(src))

all: clean build 

.PHONY: build 
build: $(OBJS) $(INC_FILES) 
	@echo  "\n>>>BUILDING CORE LIBRARY"
	mkdir -p "$(LIBPATH)"
	$(AR) rcs $(LIBPATH)/core.a $(OBJS)	
	@echo  "\n>>>COPYING INCLUDE FILES"
	mkdir -p "$(INCPATH)"
	cp $(INC_FILES) $(INCPATH)
	cp -R avr/ util/ $(INCPATH)
	cp mk20dx256.ld $(INCPATH)

lib: build 

# install location core library and include

# $(TOOLPATH)/arm/bin/arm-none-eabi-gcc $(ASMFLAGS) -I$COREPATH) $(COREPATH)/memcpy-armv7m.S -o $(BUILDPATH)/memcpy-armv7m.S.o                                                              
$(BUILDPATH)/%.o: %.S
	mkdir -p "$(dir $@)"
	$(CC) $(ASMFLAGS) -I$(COREPATH)  -o "$@" -c "$<"                                                             

$(BUILDPATH)/%.o: %.c
	mkdir -p "$(dir $@)"
	$(CC) $(CFLAGS) -I$(COREPATH) -o "$@" -c "$<"

$(BUILDPATH)/%.o: %.cpp
	@echo "[CXX]\t$<"
	mkdir -p "$(dir $@)"
	$(CXX) $(CPPFLAGS) -I$(COREPATH) -o "$@" -c "$<"



# compiler generated dependency info
# -include $(OBJS:.o=.d)
.PHONY: clean
clean:
	@echo Cleaning...
	rm -rf "$(BUILDPATH)"
	rm -rf $(INCPATH)/*.h
	rm -rf $(INCPATH)/avr/*.h
	rm -rf $(INCPATH)/util/*.h
	rm -rf $(LIBPATH)/core.a

.PHONY: dump
dump:
	@echo "COREPATH     \t$(COREPATH)"
	@echo "COMPILERPATH\t$(COMPILERPATH)"
	@echo "BUILDPATH   \t$(BUILDPATH)"
	@echo "LIBPATH     \t$(LIBPATH)"
	@echo "INCPATH     \t$(INCPATH)"
	@echo "Assembler FILES:"
	@echo $(ASM_FILES) | gawk '{for (i=1;i<=NF;i++) print $$i}'
	@echo "C FILES:"
	@echo $(C_FILES) | gawk '{for (i=1;i<=NF;i++) print $$i}'
	@echo "CPP FILES:"
	@echo $(CPP_FILES) | gawk '{for (i=1;i<=NF;i++) print $$i}'
	@echo "Object FILES:"
	@echo $(OBJS) | gawk '{for (i=1;i<=NF;i++) print $$i}'

